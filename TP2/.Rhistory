graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
plot_graph2(aracne_res, dag, fontsize=40)
# dots, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="neato")
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dots"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
new_col[! g_names %in% real_g_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
plot_graph2(aracne_res, dag, fontsize=40)
# dots, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="neato")
# dots, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="dots")
# dots, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="twopi")
# dots, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="circo")
# dots, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="fdp")
?layoutType
?layoutGraph
?graphviz.plot
# dots, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="dot")
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
new_col[! g_names %in% real_g_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
# dot, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="neato")
# dot, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="twopi")
# dot, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="circo")
# dot, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="fdp")
plot_graph2(aracne_res, dag, fontsize=40)
plot_graph2(aracne_res, dag, fontsize=37)
?pc
?insurance
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
bnObject <- bnlearn::skeleton(bnObject)
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
new_col[! g_names %in% real_g_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
plot_graph2(dag)
plot_graph2(hc_res, fontsize=60)
plot_graph2(hc_res, dag, fontsize=60)
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
new_col[! g_names %in% real_g_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
hc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(bnlearn::skeleton(dag))), graph_from_adjacency_matrix(amat(bnlearn::skeleton(hc_res))))
hc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(dag)), graph_from_adjacency_matrix(amat(bnlearn::skeleton(hc_res))))
plot_graph2(hc_res, dag, fontsize=60)
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
new_col[! g_names %in% real_g_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
plot_graph2(as.bn(pc_res), dag, fontsize=33)
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
new_col[! g_names %in% real_g_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
plot_graph2(hc_res, dag, fontsize=60)
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
real_bnObject <- bnlearn::skeleton(real_bnObject)
# Get names
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
g2_names <- names(graph::edgeRenderInfo(g2)$col)
g2_names <- g2_names[! g2_names %in% real_g_names]
indexes <- g_names %in% g2_names
#indexes <- ! g_names %in% real_g_names
new_col[indexes] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
plot_graph2(hc_res, dag, fontsize=60)
plot_graph2(as.bn(pc_res), dag, fontsize=33)
bnObject <- as.bn(pc_res)
real_bnObject <- dag
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
layoutFun="dot"
fontsize=13
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
real_bnObject <- bnlearn::skeleton(real_bnObject)
# Get names
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
g2_names <- names(graph::edgeRenderInfo(g2)$col)
g2_names
real_g_names
E(g2)
bnObject2
E(bnObject2)
E(graph(bnObject2))
graph(bnObject2)
attributes(bnObject2)
bnObject2$arcs
graphviz.compare(as.bn(pc_res), dag)
graphviz.compare(as.bn(pc_res), dag, arcs=T)
?graphviz.compare
graphviz.compare(as.bn(pc_res), dag, arcs=TRUE)
graphviz.compare(hc_res, dag, arcs=TRUE)
bnlearn::compare(hc_res, dag, arcs=TRUE)
bnlearn::compare(bnlearn::skeleton(as.bn(pc_res)), dag, arcs=TRUE)
bnlearn::compare(dag, bnlearn::skeleton(as.bn(pc_res)), arcs=TRUE)
graphviz.compare(dag, hc_res)
res <- graphviz.compare(dag, hc_res)
res
bnlearn::compare(dag, bnlearn::skeleton(as.bn(pc_res)))
pc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(bnlearn::skeleton(dag))), graph_from_adjacency_matrix(amat(bnlearn::skeleton(as.bn(pc_res)))))
bnlearn::compare(bnlearn::skeleton(as.bn(pc_res)), dag)
bnlearn::compare(bnlearn::skeleton(as.bn(pc_res)), bnlearn::skeleton(dag))
bnlearn::compare(bnlearn::skeleton(dag), bnlearn::skeleton(as.bn(pc_res)))
graph!!edgeRenderInfo(g2)
graph::edgeRenderInfo(g2)
bnObject <- as.bn(pc_res)
real_bnObject <- dag
# Get skeleton
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnlearn::skeleton(bnObject)))
real_bnObject <- bnlearn::skeleton(real_bnObject)
g2_edge <- graph::edgeRenderInfo(g2)
g2_edge
real_g_edge
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
(g2_edge$enamesFrom == real_g_edge$enamesFrom && g2_edge$enamesTo == real_g_edge$enamesTo) || (g2_edge$enamesFrom == real_g_edge$enamesTo && g2_edge$enamesTo == real_g_edge$enamesFrom)
c(T, T, T)
t <- c(T, T, T)
t & c(F, F, F)
t && c(F, F, F)
(g2_edge$enamesFrom == real_g_edge$enamesFrom & g2_edge$enamesTo == real_g_edge$enamesTo) | (g2_edge$enamesFrom == real_g_edge$enamesTo & g2_edge$enamesTo == real_g_edge$enamesFrom)
graphviz.compare(real_bnObject, bnObject2)
compare(real_bnObject, bnObject2)
bnlearn::compare(real_bnObject, bnObject2)
bnlearn::compare(real_bnObject, bnObject2, arcs=T)
bnlearn::compare(real_bnObject, bnObject2, arcs=T)
bnlearn::compare(real_bnObject, bnObject2, arcs=T)$fp
bnObject <- hc_res
real_bnObject <- dag
# Get skeleton
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnlearn::skeleton(bnObject)))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
bnlearn::compare(real_bnObject, bnObject2, arcs=T)$fp
bnObject <- hc_res
real_bnObject <- dag
# Get skeleton
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnlearn::skeleton(bnObject)))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
bnlearn::compare(real_bnObject, bnObject2, arcs=T)$fp
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp
fp_edge <- bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp
bnObject <- hc_res
real_bnObject <- dag
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject))
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
g_edge <- graph::edgeRenderInfo(g)
g_edge
bnObject <- hc_res
real_bnObject <- dag
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject))
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
g_edge <- graph::edgeRenderInfo(g)
g_edge
t
cat(t)
cat(t, sep="~")
fp_edge <- apply(bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp, MARGIN=1, FUN=function(x){ cat(x, sep="~") })
fp_edge <- apply(bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp, MARGIN=2, FUN=function(x){ cat(x, sep="~") })
bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp
temp <- bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp
temp[1]
temp[1,]
cat(temp[1,], sep="~")
apply(temp, MARGIN=1, FUN=function(x){ cat(x, sep="~") })
dim(apply(temp, MARGIN=1, FUN=function(x){ cat(x, sep="~") }))
typeof(temp)
typeof(as.matrix(temp))
typeof(as.dataframe(temp))
typeof(as.data.frame(temp))
apply(as.data.frame(temp), MARGIN=1, FUN=function(x){ cat(x, sep="~") })
g_edge
g_edge <- names(graph::edgeRenderInfo(g)$col)
g_edge
fp_edge
fp_edge <- bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp
fp_edge
?sapply
apply(temp, MARGIN=1, FUN=function(x){x[1]})
apply(temp, MARGIN=1, FUN=function(x){ cat(x[1],x[2]) })
apply(temp, MARGIN=1, FUN=function(x){ [cat(x[1],x[2])] })
apply(temp, MARGIN=1, FUN=function(x){ c(cat(x[1],x[2])) })
apply(temp, MARGIN=1, FUN=function(x){ paste(x) })
apply(temp, MARGIN=1, FUN=function(x){ paste(x[1],x[2]) })
apply(temp, MARGIN=1, FUN=function(x){ paste(x[1],x[2],sep="~") })
bnObject <- as.bn(pc_res)
real_bnObject <- dag
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject))
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
fp_edge <- bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp
fp_edge_names <- apply(fpedge, MARGIN=1, FUN=function(x){ paste(x[1],x[2],sep="~") })
fp_edge
bnObject <- as.bn(pc_res)
real_bnObject <- dag
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject))
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
fp_edge <- bnlearn::compare(real_bnObject, bnObject, arcs=T)$fp
fp_edge
bnObject <- as.bn(pc_res)
real_bnObject <- dag
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject))
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
fp_edge <- bnlearn::compare(real_bnObject, bnObject2, arcs=T)$fp
fp_edge
bnObject <- hc_res
real_bnObject <- dag
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject))
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
fp_edge <- bnlearn::compare(real_bnObject, bnObject2, arcs=T)$fp
fp_edge
fp_edge_names <- apply(fp_edge, MARGIN=1, FUN=function(x){ paste(x[1],x[2],sep="~") })
sum(g_names %in% fp_egde_names)
g_names %in% fp_edge_names
sum(g_names %in% fp_edge_names)
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
fp_edge <- bnlearn::compare(real_bnObject, bnObject2, arcs=T)$fp
fp_edge_names <- apply(fp_edge, MARGIN=1, FUN=function(x){ paste(x[1],x[2],sep="~") })
new_col[g_names %in% fp_edge_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
# real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
# real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
# new_col <- graph::edgeRenderInfo(g)$col
# g_names <- names(new_col)
# indexes <- ! g_names %in% real_g_names
# new_col[indexes] <- "red"
# graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
#######
# 3
#######
# a
data <- data.matrix(insurance) - 1
nlev=apply(data, MARGIN=2, FUN=function(x){ length(attr(as.factor(x), "levels")) })
pc_res <- pc(suffStat=list(dm = data, nlev=nlev, adaptDF = FALSE), indepTest=disCItest, alpha=0.05, labels=colnames(data))
# b
pc_adj <- as(pc_res, "amat")
# c
plot_graph(pc_adj)
# d
pc_graph <- graph_from_adjacency_matrix(pc_adj)
pc_stats <- compute_statistics(real_graph, pc_graph)
pc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(bnlearn::skeleton(dag))), graph_from_adjacency_matrix(amat(bnlearn::skeleton(as.bn(pc_res)))))
pc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(cpdag(dag))), graph_from_adjacency_matrix(amat(cpdag(as.bn(pc_res)))))
# e
plot_graph(pc_adj, real_graph, offset_size=11, layout=layout_with_dh)
plot_graph2(as.bn(pc_res), dag, fontsize=33)
plot_graph2(as.bn(pc_res), dag, fontsize=33)
#######
# 4
#######
# a
aracne_res <- aracne(insurance)
# b
aracne_adj <- amat(aracne_res)
# c
plot_graph(aracne_adj)
# d
aracne_graph <- graph_from_adjacency_matrix(aracne_adj)
aracne_stats <- compute_statistics(real_graph, aracne_graph)
aracne_stats <- compute_statistics(graph_from_adjacency_matrix(amat(bnlearn::skeleton(dag))), graph_from_adjacency_matrix(amat(bnlearn::skeleton(aracne_res))))
aracne_stats <- compute_statistics(graph_from_adjacency_matrix(amat(cpdag(dag))), graph_from_adjacency_matrix(amat(cpdag(aracne_res))))
# e
plot_graph(aracne_adj, real_graph, offset_size=11)
plot_graph2(aracne_res, dag, fontsize=37)
# dot, neato, twopi, circo and fdp
plot_graph2(aracne_res, dag, fontsize=40, layoutFun="fdp")
plot_graph2(aracne_res, dag, fontsize=37)
#######
# 3
#######
# a
data <- data.matrix(insurance) - 1
nlev=apply(data, MARGIN=2, FUN=function(x){ length(attr(as.factor(x), "levels")) })
pc_res <- pc(suffStat=list(dm = data, nlev=nlev, adaptDF = FALSE), indepTest=disCItest, alpha=0.05, labels=colnames(data))
# b
pc_adj <- as(pc_res, "amat")
# c
plot_graph(pc_adj)
# d
pc_graph <- graph_from_adjacency_matrix(pc_adj)
pc_stats <- compute_statistics(real_graph, pc_graph)
pc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(bnlearn::skeleton(dag))), graph_from_adjacency_matrix(amat(bnlearn::skeleton(as.bn(pc_res)))))
pc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(cpdag(dag))), graph_from_adjacency_matrix(amat(cpdag(as.bn(pc_res)))))
# e
plot_graph(pc_adj, real_graph, offset_size=11, layout=layout_with_dh)
plot_graph2(as.bn(pc_res), dag, fontsize=33)
#######
# 2
#######
# b
hc_res <- hc(insurance)
# c
hc_adj <- amat(hc_res)
hc_graph <- graph_from_adjacency_matrix(hc_adj)
# d
plot_graph(hc_adj)
# e
hc_graph <- graph_from_adjacency_matrix(hc_adj)
hc_stats <- compute_statistics(real_graph, hc_graph)
hc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(bnlearn::skeleton(dag))), graph_from_adjacency_matrix(amat(bnlearn::skeleton(hc_res))))
hc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(cpdag(dag))), graph_from_adjacency_matrix(amat(cpdag(hc_res))))
bnlearn::compare(dag, hc_res)
# f
plot_graph(hc_adj, real_graph, offset_size=11)
plot_graph2(hc_res, fontsize=60)
plot_graph2(hc_res, dag, fontsize=60)
temp <- graphviz.compare(dag, hc_res)
temp
plot_graph2(as.bn(pc_res), dag, fontsize=33)
dag
hc_res
# Plot with graphviz
plot_graph2 <- function(bnObject, real_bnObject=NULL, fontsize=3, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
if(! is.null(real_bnObject)){
# Get skeleton
bnObject2 <- bnlearn::skeleton(bnObject)
g2 <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject2))
g2_edge <- graph::edgeRenderInfo(g2)
real_bnObject <- bnlearn::skeleton(real_bnObject)
real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
real_g_edge <- graph::edgeRenderInfo(real_g)
new_col <- graph::edgeRenderInfo(g)$col
g_names <- names(new_col)
fp_edge <- bnlearn::compare(real_bnObject, bnObject2, arcs=T)$fp
fp_edge_names <- apply(fp_edge, MARGIN=1, FUN=function(x){ paste(x[1],x[2],sep="~") })
print(g_names[g_names %in% fp_edge_names])
new_col[g_names %in% fp_edge_names] <- "red"
graph::edgeRenderInfo(g) <- list(col=new_col)
# real_g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(real_bnObject))
# real_g_names <- names(graph::edgeRenderInfo(real_g)$col)
# new_col <- graph::edgeRenderInfo(g)$col
# g_names <- names(new_col)
# indexes <- ! g_names %in% real_g_names
# new_col[indexes] <- "red"
# graph::edgeRenderInfo(g) <- list(col=new_col)
}
Rgraphviz::renderGraph(g)
}
plot_graph2(hc_res, dag, fontsize=60)
pc_graph
E(pc_graph)
# d
pc_graph <- graph_from_adjacency_matrix(pc_adj)
pc_stats <- compute_statistics(real_graph, pc_graph)
pc_stats <- compute_statistics(graph_from_adjacency_matrix(amat(bnlearn::skeleton(dag))), graph_from_adjacency_matrix(amat(bnlearn::skeleton(as.bn(pc_res)))))
