# ------- 4
plot_graph(hc_res, offset=15)
# ------- 4
plot_graph(hc_res, offset=10)
# ------- 4
plot_graph(hc_res, offset=7)
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Remove node with 0 degree
deg <- degree(graph, mode = "all")
graph <- delete.vertices(graph, which(deg==0))
V(graph)$size <- log(deg*2) + offset_size
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Remove node with 0 degree
deg <- degree(graph, mode = "all")
graph <- delete.vertices(graph, which(deg==0))
V(graph)$size <- log(deg*4) + offset_size
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Remove node with 0 degree
deg <- degree(graph, mode = "all")
graph <- delete.vertices(graph, which(deg==0))
V(graph)$size <- log(deg*10) + offset_size
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Remove node with 0 degree
deg <- degree(graph, mode = "all")
graph <- delete.vertices(graph, which(deg==0))
V(graph)$size <- log(deg*100) + offset_size
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Remove node with 0 degree
deg <- degree(graph, mode = "all")
graph <- delete.vertices(graph, which(deg==0))
V(graph)$size <- log(deg)*2 + offset_size
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Remove node with 0 degree
deg <- degree(graph, mode = "all")
graph <- delete.vertices(graph, which(deg==0))
V(graph)$size <- log(deg)*2 + offset_size
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Remove node with 0 degree
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=18*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=100*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=1*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=8*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=5*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=5*(vcount(graph)^2), repulse.rad=5*(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=5*(vcount(graph)^2), repulse.rad=10*(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=5*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, offset_size=15, layout=layout_with_dh){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*2 + offset_size
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=50*(vcount(graph)^2), repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# Plot with igraph
plot_graph <- function(bnObject, area_ratio=50, size_offset=15, size_ratio=2){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "red",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*size_ratio + size_offset
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=area_ratio*(vcount(graph)^2),
repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, offset=9)
# ------- 4
plot_graph(hc_res)
# ------- 4
plot_graph(hc_res, size_offest=9)
# ------- 4
plot_graph(hc_res, size_offset=9)
# ------- 4
plot_graph(hc_res, size_offset=9, size_ratio=3)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=3)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2.5)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2.5, area_ratio=1000)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2.5, area_ratio=1)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2.5, area_ratio=2)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2.5, area_ratio=5)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2.5, area_ratio=10)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2.5, area_ratio=8)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=8)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10)
# Plot with igraph
plot_graph <- function(bnObject, area_ratio=8, size_offset=7, size_ratio=2){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "orange",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*size_ratio + size_offset
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=area_ratio*(vcount(graph)^2),
repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.1, layout=layout)
}
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10)
# Plot with igraph
plot_graph <- function(bnObject, area_ratio=8, size_offset=7, size_ratio=2){
graph <- graph_from_adjacency_matrix(amat(bnObject))
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "orange",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*size_ratio + size_offset
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=area_ratio*(vcount(graph)^2),
repulse.rad=(vcount(graph)^3.1))
# Plot
plot(graph, edge.arrow.size=0.07, layout=layout)
}
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=11)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=12)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=13)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=20)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=50)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=8)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=8)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=11)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=8)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=11)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=12)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=13)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=11)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10.5)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10)
plot_graph2(hc_res)
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10)
# ------- Remove samples with NA values
data_cleaned <- data[complete.cases(data), ]
dim(data_cleaned)
# ------- 3
hc_res <- hc(data_cleaned)
# ------- As factor
col <- names(data_cleaned)
data_cleaned[col] <- lapply(data_cleaned[col], FUN=as.factor)
# ------- 3
hc_res <- hc(data_cleaned)
data_cleaned["gstm3"]
data_cleaned[,"gstm3"]
sum(data_cleaned[,"gstm3"] == "n")
sum(data_cleaned[,"gstm3"] == "y")
# ------- Remove samples with NA values
data_cleaned <- data[complete.cases(data), ]
data("cosmicCancer")
data <- cosmicCancer
dim(data)
# ------- Remove samples with NA values
data_cleaned <- data[complete.cases(data), ]
dim(data_cleaned)
# ------- Remove variables with constant value
data_cleaned <- data_cleaned[, apply(data_cleaned, MARGIN=2, FUN=function(x){length(unique(x))}) != 1]
dim(data_cleaned)
