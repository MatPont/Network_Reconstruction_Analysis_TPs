plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
data <- scale(as.matrix(hematoData))
hematopoietic <- c("Runx1", "Ikaros", "Myb", "Cbfa2t3h", "Gata1", "Mitf", "Nfe2", "Gfi1b", "Sfpi1", "Gfi1")
endothelial <- c("Erg", "Sox17", "Notch1", "Tbx3", "Tbx20", "Sox7", "HoxB4")
unclassified <- c("HoxB2", "HoxD8")
lambda = 1
lambda = diag(lambda,dim(data)[2],dim(data)[2])
data_cov=cov(data) + lambda
res_corr_filter = solve(data_cov) * (-1)
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
to_keep_pos <- 1
to_keep_neg <- to_keep_pos + 2
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep_pos) & my_order > to_keep_neg | (my_order < to_keep_neg & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
install.packages(c("plspm", "rstudioapi"))
install.packages(c("ggraph", "Hmisc", "igraph", "miic", "rstudioapi"))
install.packages(c("corrplot", "factoextra", "fields", "rstudioapi"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(bnlearn)
library(igraph)
library(pcalg)
library(miic)
library(qgraph)
data("cosmicCancer")
data <- cosmicCancer
dim(data)
# ------- Remove samples with NA values
data_cleaned <- data[complete.cases(data), ]
dim(data_cleaned)
# We have removed 8 samples with NA values
colSums(is.na(data))[colSums(is.na(data)) != 0]
# ------- Remove variables with constant value
data_cleaned <- data_cleaned[, apply(data_cleaned, MARGIN=2, FUN=function(x){length(unique(x))}) != 1]
dim(data_cleaned)
# ------- As factor
col <- names(data_cleaned)
data_cleaned[col] <- lapply(data_cleaned[col], FUN=as.factor)
as_factor_matrix <- function(matrix){
col <- names(matrix)
matrix[col] <- lapply(matrix[col], FUN=as.factor)
return(matrix)
}
#####################
# Plot with igraph
#####################
plot_graph <- function(bnObject, bnObject_adj=NULL, area_ratio=8, size_offset=7, size_ratio=2, highlight_betweenness=FALSE,
highlight_link_muta_expr=FALSE, miic=FALSE){
if(is.null(bnObject_adj))
graph <- graph_from_adjacency_matrix(amat(bnObject), mode="directed")
else
graph <- graph_from_adjacency_matrix(bnObject_adj, mode="directed")
# Customize colors
V(graph)$color <- ifelse(names(V(graph)) == tolower(names(V(graph))), "orange",
ifelse(names(V(graph)) == toupper(names(V(graph))), "cyan",
"green"))
# Highlist top nodes and arcs according to betweenness centrality
if(highlight_betweenness){
# --- nodes
nodes_condition <- V(graph) %in% V(graph)[rev(order(betweenness(graph)))[1:10]]
# node shape
V(graph)$shape <- ifelse(nodes_condition, "square", "circle")
# node contour color
V(graph)$frame.color <- ifelse(nodes_condition, "black", "gray")
# --- edges
betweenness_edges_condition <- E(graph) %in% E(graph)[rev(order(edge_betweenness(graph)))[1:10]]
# edge color
E(graph)$color <- ifelse(betweenness_edges_condition, "black", "gray")
# edge width
E(graph)$width <- ifelse(betweenness_edges_condition, 4, 3)
}
# Highlight link between mutated and expressed genes
if(highlight_link_muta_expr){
edges <- t( apply(as.matrix(attr(E(graph), "vnames")), MARGIN=1, FUN=function(x){ unlist(strsplit(x, "[|]")) }) )
link_muta_expr_edges_condition <- (edges[,1]==toupper(edges[,1]) & edges[,2]==tolower(edges)[,2]) |
(edges[,2]==toupper(edges[,2]) & edges[,1]==tolower(edges)[,1])
# edge color
#E(graph)$color <- ifelse(link_muta_expr_edges_condition, "red", "gray")
# node symbol font
nodes <- unique(c(edges[link_muta_expr_edges_condition]))
nodes <- nodes[nodes == tolower(nodes)]
V(graph)$label.font <- ifelse(V(graph) %in% V(graph)[nodes], 2, 1)
}
# Customize size
deg <- degree(graph, mode = "all")
V(graph)$size <- log(deg)*size_ratio + size_offset
E(graph)$curved <- FALSE
if(miic){
x <- miic.res$retained.edges.summary$x[miic.res$retained.edges.summary$partial_correlation < 0]
y <- miic.res$retained.edges.summary$y[miic.res$retained.edges.summary$partial_correlation < 0]
t <- apply(cbind(x, y), MARGIN=1, FUN=function(x){ paste(x, collapse="|") } )
edges <- as.matrix(attr(E(graph), "vnames"))
miic_condition <- edges %in% t
E(graph)$color <- ifelse(miic_condition, "red", "gray")
}
# Manage if highlight betweeness and miic are requested
if(highlight_betweenness & miic){
E(graph)$color <- ifelse(betweenness_edges_condition & miic_condition, "darkred",
ifelse(betweenness_edges_condition, "black",
ifelse(miic_condition, "red", "gray")))
}
# Remove node with 0 degree
graph <- delete.vertices(graph, which(deg==0))
# Create layout
e <- get.edgelist(graph, names=F)
layout <- qgraph.layout.fruchtermanreingold(e, vcount=vcount(graph),
area=area_ratio*(vcount(graph)^2),
repulse.rad=(vcount(graph)^3.1))
# Plot
edge_arrow_size = ifelse(miic, 0.12, 0.12)
plot(graph, edge.arrow.size=edge_arrow_size, layout=layout)
}
#####################
# Plot with graphviz
#####################
plot_graph2 <- function(bnObject, fontsize=0, layoutFun="dot"){
g <- Rgraphviz::layoutGraph(bnlearn::as.graphNEL(bnObject), layoutType=layoutFun)
graph::nodeRenderInfo(g) <- list(fontsize=fontsize, shape="circle")
# Customize colors
node_names <- names(graph::nodeRenderInfo(g)$col)
graph::nodeRenderInfo(g)$col[node_names == tolower(node_names)] <- "red"
graph::nodeRenderInfo(g)$col[node_names == toupper(node_names)] <- "blue"
# Remove node with 0 degree
deg <- degree(graph_from_adjacency_matrix(amat(bnObject)))
graph::nodeRenderInfo(g)$col[deg == 0] <- "white"
graph::nodeRenderInfo(g)$fontsize[deg == 0] <- 1
# Plot
Rgraphviz::renderGraph(g)
}
#####################
# Print requested carac
#####################
print_carac <- function(bnObject, bnObject_adj=NULL){
if(is.null(bnObject_adj))
graph <- graph_from_adjacency_matrix(amat(bnObject))
else
graph <- graph_from_adjacency_matrix(bnObject_adj)
# Get hubs
degree <- degree(graph)
print("======= 1) HUBS")
print(sort(degree, decreasing = T)[1:10])
# Get variables related to "Ploidy"
print("======= 2) Variables related to Ploidy")
if(is.null(bnObject_adj))
print(bnObject$nodes$Ploidy$nbr)
else
print(bnObject_adj["Ploidy",][bnObject_adj["Ploidy",] != 0])
# Get top 10 nodes and edges with betweenness centrality
print("======= 3) Top 10 nodes and edges with betweenness centrality")
print("- Nodes")
print(sort(betweenness(graph), decreasing = T)[1:10])
print("- Edges")
print(E(graph)[rev(order(edge_betweenness(graph)))[1:11]])
# Get the mutated genes (lower case nodes) that are related to gene expression (upper case nodes)
edges <- bnObject$arcs[ (bnObject$arcs[,1]==toupper(bnObject$arcs[,1]) & bnObject$arcs[,2]==tolower(bnObject$arcs)[,2]) |
(bnObject$arcs[,2]==toupper(bnObject$arcs[,2]) & bnObject$arcs[,1]==tolower(bnObject$arcs)[,1]), ]
nodes <- unique(c(edges))
nodes <- nodes[nodes == tolower(nodes)]
print("======= 4) Mutated genes (lower case nodes) that are related to gene expression (upper case nodes)")
print(nodes)
print(rev(sort(table(edges)[nodes])))
}
#####################
# Run
#####################
run_algorithm <- function(data, data_cleaned, algo="hc"){
}
# ------- 3
hc_res <- hc(data_cleaned)
hc_graph <- graph_from_adjacency_matrix(amat(hc_res))
# ------- 4
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10)
plot_graph2(hc_res)
# ------- 5
print_carac(hc_res)
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10, highlight_betweenness=T)
plot_graph(hc_res, size_offset=7, size_ratio=2, area_ratio=10, highlight_betweenness=T, highlight_link_muta_expr=T)
dim(hc_res$arcs)
names(hc_res$arcs)
hc_res$arcs[hc_res$arcs[1,] == "tp53",]
hc_res$arcs
hc_res$arcs[hc_res$arcs[2,] == "tp53",]
hc_res$arcs[hc_res$arcs[,1] == "tp53",]
hc_res$arcs[hc_res$arcs[,2] == "tp53",]
attributes(hc_res)
hc_res$arcs
hc_res$learning
